# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AssetModel {
  name: String!
  type: AssetType!
  uuid: String!
}

enum AssetType {
  Normal
  Attribute
  Usable
  Equippable
}

type AssetInstanceModel {
  asset: AssetModel!
  count: Int!
}

type AttributeModel {
  name: String
  uuid: String!
}

type EquipEffectModel {
  attribute: AttributeModel!
  name: String!
  type: EquipEffectType!
  uuid: String!
  amount: Float!
}

enum EquipEffectType {
  Increase
  Decrease
}

type EquippableAssetModel {
  effects: [EquipEffectModel!]!
  forBodyPart: BodyPart!
  name: String!
  type: AssetType!
  uuid: String!
}

enum BodyPart {
  Head
  Body
  Wrist
  Necklace
  Shoes
}

type CharacterEquipmentModel {
  head: EquippableAssetModel
  body: EquippableAssetModel
  wrist: EquippableAssetModel
  necklace: EquippableAssetModel
  shoes: EquippableAssetModel
}

type LocationModel {
  characterCanLeaveAnytime: Boolean!
  isUnlockedFromBeginning: Boolean!
  isVisibleOnMap: Boolean!
  name: String
  uuid: String!
}

type CharacterMapModel {
  id: Int!
  currentLocation: LocationModel!
  unlockedLocations: [LocationModel!]!
}

type CharacterAttributeModel {
  attribute: AttributeModel!
  pointsCollected: Float!
}

type CharacterModel {
  uuid: String!
  assetInstances: [AssetInstanceModel!]!
  attributes: [CharacterAttributeModel!]!
  equipment: CharacterEquipmentModel!
  map: CharacterMapModel!
}

type PlaceModel {
  locations: [LocationModel!]!
  name: String!
  uuid: String!
}

type AttributeConditionModel {
  attributeLevelFor100Percent: Float!
  attributeToActivate: AttributeModel!
}

type AssetConditionModel {
  characterHasAssets: [AssetInstanceModel!]!
  characterHasNotAssets: [AssetInstanceModel!]!
  characterIsAtLocation: LocationModel!
  name: String!
  uuid: String!
}

type SubmitDecisionResultModel {
  attributeToIncrease: AttributeModel!
  characterGainsAssetInstances: [AssetInstanceModel!]!
  characterGoesToLocation: LocationModel!
  characterLoosesAssetInstances: [AssetInstanceModel!]!
  characterWins: Boolean!
  providesAttributePoints: Float!
  text: String!
}

type DecisionModel {
  attributeCondition: AttributeConditionModel!
  conditionsToShow: AssetConditionModel!
  conditionsToUse: AssetConditionModel!
  name: String!
  onFail: SubmitDecisionResultModel!
  onWin: SubmitDecisionResultModel!
  text: String!
  uuid: String!
}

type StoryModel {
  characterHasAssets: AssetInstanceModel!
  characterHasNotAssets: AssetInstanceModel!
  characterIsAtPlace: PlaceModel!
  decisions: [DecisionModel!]!
  name: String!
  text: String!
  uuid: String!
}

type Query {
  character(uuid: String!): CharacterModel!
  story(uuid: String!): [StoryModel!]!
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model character {
  id                       Int                        @id @default(autoincrement())
  uuid                     String                     @unique @db.Uuid
  character_asset_instance character_asset_instance[]
  attributes               attribute[]
  character_equipment      character_equipment[]
  character_map            character_map[]
}

model asset {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique @db.Uuid
  name             String
  type             asset_type
  asset_instance   asset_instance[]
  equippable_asset equippable_asset[]
}

model asset_instance {
  id                       Int                        @id @default(autoincrement())
  asset_id                 Int
  asset                    asset                      @relation(fields: [asset_id], references: [id])
  character_asset_instance character_asset_instance[]
}

model character_asset_instance {
  character_id      Int            @unique
  character         character      @relation(fields: [character_id], references: [id])
  asset_instance    asset_instance @relation(fields: [asset_instance_id], references: [id])
  asset_instance_id Int

  @@index([character_id])
}

model attribute {
  id               Int            @id @default(autoincrement())
  uuid             String         @unique @db.Uuid
  name             String?        @unique
  points_collected Int
  character_id     Int
  character        character      @relation(fields: [character_id], references: [id])
  equip_effect     equip_effect[]
}

model character_equipment {
  character_id      Int              @unique
  character         character        @relation(fields: [character_id], references: [id])
  head_asset_id     Int
  head              equippable_asset @relation(name: "head", fields: [head_asset_id], references: [id])
  body_asset_id     Int
  body              equippable_asset @relation(name: "body", fields: [body_asset_id], references: [id])
  wrist_asset_id    Int
  wrist             equippable_asset @relation(name: "wrist", fields: [wrist_asset_id], references: [id])
  necklace_asset_id Int
  necklace          equippable_asset @relation(name: "necklace", fields: [necklace_asset_id], references: [id])
  shoes_asset_id    Int
  shoes             equippable_asset @relation(name: "shoes", fields: [shoes_asset_id], references: [id])
}

model equippable_asset {
  id                 Int                   @id @default(autoincrement())
  uuid               String                @unique @db.Uuid
  equip_effect_id    Int
  equip_effect       equip_effect          @relation(fields: [equip_effect_id], references: [id])
  type               asset_type
  for_body_part      body_part
  name               String?
  asset_id           Int
  asset              asset                 @relation(fields: [asset_id], references: [id])
  head_equipment     character_equipment[] @relation("head")
  body_equipment     character_equipment[] @relation("body")
  wrist_equipment    character_equipment[] @relation("wrist")
  necklace_equipment character_equipment[] @relation("necklace")
  shoes_equipment    character_equipment[] @relation("shoes")
}

model equip_effect {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique @db.Uuid
  name             String
  attribute_id     Int
  attribute        attribute          @relation(fields: [attribute_id], references: [id])
  type             equip_effect_type
  equippable_asset equippable_asset[]
  amount           Int
}

model character_map {
  id                  Int        @id @default(autoincrement())
  character_id        Int        @unique
  character           character  @relation(fields: [character_id], references: [id])
  current_location_id Int
  current_location    location   @relation(name: "character_map_current_location", fields: [current_location_id], references: [id])
  locations           location[]

  @@index([character_id])
}

model location {
  id                          Int             @id @default(autoincrement())
  is_visible_on_map           Boolean
  is_unlocked_from_beginning  Boolean
  character_can_leave_anytime Boolean
  character_maps              character_map[]
  character_map               character_map[] @relation("character_map_current_location")
}

enum asset_type {
  Normal
  Usable
  Equippble
}

enum body_part {
  Head
  Body
  Wrist
  Necklace
  Shoes
}

enum equip_effect_type {
  Increase
  Decrease
}
